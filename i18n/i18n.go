// Code generated by go-localize; DO NOT EDIT.
// This file was generated by robots at
// 2024-09-04 12:16:23.631291 +0100 WEST m=+0.002913251

package i18n

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"
)

var localizations = map[string]string{
	"ru.Action: {{.tool}}\nAction input: %s": "Действие: {{.tool}}\nЗапрос: %s",
	"ru.Conversation age set to %d days":     "Длительность хранения истории разговора установлена на %d дней",
	"ru.Enter role name":                     "Введите имя для этой роли",
	"ru.Enter system prompt":                 "Введите системный запрос который определит как будет вести себя ассистент",
	"ru.Model set to {{.model}}":             "Языковая модель установлена на {{.model}}",
	"ru.New Conversation":                    "Новый Диалог",
	"ru.New Role":                            "Новая Роль",
	"ru.No response from API.":               "Нет ответа от API.",
	"ru.Please provide a longer prompt":      "Пожалуйста, введите более длинный запрос",
	"ru.Please provide a number":             "Пожалуйста, введите число",
	"ru.Please provide a text file":          "Пожалуйста, загрузите текстовый файл",
	"ru.Processing document. Please wait...": "Идет обработка документа. Пожалуйста, подождите...",
	"ru.Web search started, please wait...":  "Выполняется поиск в интернете. Пожалуйста, подождите...",
	"ru.Prompt set":                          "Новый системный запрос установлен",
	"ru.Role deleted":                        "Роль была успешно удалена",
	"ru.Role not found":                      "Роль не найдена",
	"ru.Select Role":                         "Выберите новую роль для ассистента",
	"ru.Select model":                        "Выберите языковую модель",
	"ru.Set temperature from less random (0.0) to more random (1.0). Current: %0.2f (default: 0.8)": "Установите креативность модели от менее случайной (0.0) до более случайной (1.0). Текущая: %0.2f (по умолчанию: 0.8)",
	"ru.Stream is {{.status}}":                               "Функция потоковой передачи сообщений: {{.status}}",
	"ru.Temperature set to {{.temp}}":                        "Креативность модели установлена на {{.temp}}",
	"ru.This bot will answer your messages with ChatGPT API": "Этот бот будет отвечать на ваши сообщения с помощью ChatGPT",
	"ru._Transcript:_\\n%s\\n\\n_Answer:_ \\n\\n\"":          "_Транскрипт:_\n%s\n\n_Ответ:_ \n\n",
	"ru.default":       "По умолчанию",
	"ru.disabled":      "деактивировано",
	"ru.enabled":       "активировано",
	"ru.search_images": "Поиск изображений",
	"ru.set_reminder":  "Установка напоминания",
	"ru.web_search":    "Поиск в интернете",
}

type Replacements map[string]interface{}

type Localizer struct {
	Locale         string
	FallbackLocale string
	Localizations  map[string]string
}

func New(locale string, fallbackLocale string) *Localizer {
	t := &Localizer{Locale: locale, FallbackLocale: fallbackLocale}
	t.Localizations = localizations
	return t
}

func (t Localizer) SetLocales(locale, fallback string) Localizer {
	t.Locale = locale
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) SetLocale(locale string) Localizer {
	t.Locale = locale
	return t
}

func (t Localizer) SetFallbackLocale(fallback string) Localizer {
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) GetWithLocale(locale, key string, replacements ...*Replacements) string {
	str, ok := t.Localizations[t.getLocalizationKey(locale, key)]
	if !ok {
		str, ok = t.Localizations[t.getLocalizationKey(t.FallbackLocale, key)]
		if !ok {
			if strings.Index(key, "}}") == -1 {
				return key
			}
			return t.replace(key, replacements...)
		}
	}

	// If the str doesn't have any substitutions, no need to
	// template.Execute.
	if strings.Index(str, "}}") == -1 {
		return str
	}

	return t.replace(str, replacements...)
}

func (t Localizer) Get(key string, replacements ...*Replacements) string {
	str := t.GetWithLocale(t.Locale, key, replacements...)
	return str
}

func (t Localizer) getLocalizationKey(locale string, key string) string {
	return fmt.Sprintf("%v.%v", locale, key)
}

func (t Localizer) replace(str string, replacements ...*Replacements) string {
	b := &bytes.Buffer{}
	tmpl, err := template.New("").Parse(str)
	if err != nil {
		return str
	}

	replacementsMerge := Replacements{}
	for _, replacement := range replacements {
		for k, v := range *replacement {
			replacementsMerge[k] = v
		}
	}

	err = template.Must(tmpl, err).Execute(b, replacementsMerge)
	if err != nil {
		return str
	}
	buff := b.String()
	return buff
}
